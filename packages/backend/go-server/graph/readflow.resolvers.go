package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"encoding/json"
	"github.com/pkg/errors"

	"github.com/mmcdole/gofeed"
	"readflow.ai/goserver/graph/model"
)

// RefreshFeed is the resolver for the refreshFeed field.
func (r *mutationResolver) RefreshFeed(ctx context.Context, feedID string) (*string, error) {
	err := r.feedService.RefreshFeed(ctx, feedID)
	if err != nil {
		return nil, err
	}
	var name = "success"
	return &name, nil
}

// SearchFeeds is the resolver for the searchFeeds field.
func (r *queryResolver) SearchFeeds(ctx context.Context, keyword string) ([]model.Feed, error) {
	dbFeeds, err := r.feedService.SearchFeeds(ctx, keyword)
	if err != nil {
		return nil, err
	}
	var res []model.Feed
	for _, dbFeed := range dbFeeds {
		var image gofeed.Image
		if imageJSON, ok := dbFeed.Image(); ok {
			if err := json.Unmarshal(imageJSON, &image); err != nil {
				return nil, errors.WithStack(err)
			}
		}

		var updated string
		if dt, ok := dbFeed.Updated(); ok {
			updated = dt.String()
		} else if dt, ok = dbFeed.Published(); ok {
			updated = dt.String()
		} else {
			updated = dbFeed.CreatedAt.String()
		}

		res = append(res, model.Feed{
			ID:          dbFeed.ID,
			Title:       dbFeed.Title,
			Description: dbFeed.Description,
			FeedType:    dbFeed.FeedType,
			FeedLink:    dbFeed.FeedLink,
			Image:       &image.URL,
			Updated:     updated,
		})
	}
	return res, nil
}

// PullFeeds is the resolver for the pullFeeds field.
func (r *queryResolver) PullFeedItems(ctx context.Context, pullInput []model.PullFeedsInput) ([]model.FeedItem, error) {
	var res []model.FeedItem
	for _, fetch := range pullInput {
		dbItems, err := r.feedService.PullFeed(ctx, fetch.FeedID, fetch.LatestFeedItemID, fetch.LatestCreatedAt)
		if err != nil {
			return nil, err
		}

		for _, item := range dbItems {
			res = append(res, model.FeedItem{
				FeedID:              item.FeedID,
				FeedItemID:          item.ID,
				Title:               item.Title,
				Link:                *item.InnerFeedItem.Link,
				DescriptionMarkdown: *item.InnerFeedItem.DescriptionMarkdown,
				ContentMarkdown:     item.InnerFeedItem.ContentMarkdown,
				CreatedAt:           item.CreatedAt.String(),
			})
		}
	}

	return res, nil
}
