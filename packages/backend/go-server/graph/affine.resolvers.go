package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"readflow.ai/goserver/graph/model"
)

// AcceptInviteByID is the resolver for the acceptInviteById field.
func (r *mutationResolver) AcceptInviteByID(ctx context.Context, inviteID string, sendAcceptMail *bool, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AcceptInviteByID - acceptInviteById"))
}

// AddAdminister is the resolver for the addAdminister field.
func (r *mutationResolver) AddAdminister(ctx context.Context, email string) (bool, error) {
	panic(fmt.Errorf("not implemented: AddAdminister - addAdminister"))
}

// AddToEarlyAccess is the resolver for the addToEarlyAccess field.
func (r *mutationResolver) AddToEarlyAccess(ctx context.Context, email string, typeArg model.EarlyAccessType) (int, error) {
	panic(fmt.Errorf("not implemented: AddToEarlyAccess - addToEarlyAccess"))
}

// AddWorkspaceFeature is the resolver for the addWorkspaceFeature field.
func (r *mutationResolver) AddWorkspaceFeature(ctx context.Context, feature model.FeatureType, workspaceID string) (int, error) {
	panic(fmt.Errorf("not implemented: AddWorkspaceFeature - addWorkspaceFeature"))
}

// CancelSubscription is the resolver for the cancelSubscription field.
func (r *mutationResolver) CancelSubscription(ctx context.Context, idempotencyKey string, plan *model.SubscriptionPlan) (*model.UserSubscription, error) {
	panic(fmt.Errorf("not implemented: CancelSubscription - cancelSubscription"))
}

// ChangeEmail is the resolver for the changeEmail field.
func (r *mutationResolver) ChangeEmail(ctx context.Context, email string, token string) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: ChangeEmail - changeEmail"))
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, newPassword string, token string) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// CleanupCopilotSession is the resolver for the cleanupCopilotSession field.
func (r *mutationResolver) CleanupCopilotSession(ctx context.Context, options model.DeleteSessionInput) ([]string, error) {
	panic(fmt.Errorf("not implemented: CleanupCopilotSession - cleanupCopilotSession"))
}

// CreateCheckoutSession is the resolver for the createCheckoutSession field.
func (r *mutationResolver) CreateCheckoutSession(ctx context.Context, input model.CreateCheckoutSessionInput) (string, error) {
	panic(fmt.Errorf("not implemented: CreateCheckoutSession - createCheckoutSession"))
}

// CreateCopilotMessage is the resolver for the createCopilotMessage field.
func (r *mutationResolver) CreateCopilotMessage(ctx context.Context, options model.CreateChatMessageInput) (string, error) {
	panic(fmt.Errorf("not implemented: CreateCopilotMessage - createCopilotMessage"))
}

// CreateCopilotPrompt is the resolver for the createCopilotPrompt field.
func (r *mutationResolver) CreateCopilotPrompt(ctx context.Context, input model.CreateCopilotPromptInput) (*model.CopilotPromptType, error) {
	panic(fmt.Errorf("not implemented: CreateCopilotPrompt - createCopilotPrompt"))
}

// CreateCopilotSession is the resolver for the createCopilotSession field.
func (r *mutationResolver) CreateCopilotSession(ctx context.Context, options model.CreateChatSessionInput) (string, error) {
	panic(fmt.Errorf("not implemented: CreateCopilotSession - createCopilotSession"))
}

// CreateCustomerPortal is the resolver for the createCustomerPortal field.
func (r *mutationResolver) CreateCustomerPortal(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: CreateCustomerPortal - createCustomerPortal"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateWorkspace is the resolver for the createWorkspace field.
func (r *mutationResolver) CreateWorkspace(ctx context.Context, init *graphql.Upload) (*model.WorkspaceType, error) {
	panic(fmt.Errorf("not implemented: CreateWorkspace - createWorkspace"))
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context) (*model.DeleteAccount, error) {
	panic(fmt.Errorf("not implemented: DeleteAccount - deleteAccount"))
}

// DeleteBlob is the resolver for the deleteBlob field.
func (r *mutationResolver) DeleteBlob(ctx context.Context, hash string, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBlob - deleteBlob"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.DeleteAccount, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// DeleteWorkspace is the resolver for the deleteWorkspace field.
func (r *mutationResolver) DeleteWorkspace(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWorkspace - deleteWorkspace"))
}

// Invite is the resolver for the invite field.
func (r *mutationResolver) Invite(ctx context.Context, email string, permission model.Permission, sendInviteMail *bool, workspaceID string) (string, error) {
	panic(fmt.Errorf("not implemented: Invite - invite"))
}

// LeaveWorkspace is the resolver for the leaveWorkspace field.
func (r *mutationResolver) LeaveWorkspace(ctx context.Context, sendLeaveMail *bool, workspaceID string, workspaceName string) (bool, error) {
	panic(fmt.Errorf("not implemented: LeaveWorkspace - leaveWorkspace"))
}

// PublishPage is the resolver for the publishPage field.
func (r *mutationResolver) PublishPage(ctx context.Context, mode *model.PublicPageMode, pageID string, workspaceID string) (*model.WorkspacePage, error) {
	panic(fmt.Errorf("not implemented: PublishPage - publishPage"))
}

// RecoverDoc is the resolver for the recoverDoc field.
func (r *mutationResolver) RecoverDoc(ctx context.Context, guid string, timestamp string, workspaceID string) (string, error) {
	panic(fmt.Errorf("not implemented: RecoverDoc - recoverDoc"))
}

// RemoveAvatar is the resolver for the removeAvatar field.
func (r *mutationResolver) RemoveAvatar(ctx context.Context) (*model.RemoveAvatar, error) {
	panic(fmt.Errorf("not implemented: RemoveAvatar - removeAvatar"))
}

// RemoveEarlyAccess is the resolver for the removeEarlyAccess field.
func (r *mutationResolver) RemoveEarlyAccess(ctx context.Context, email string) (int, error) {
	panic(fmt.Errorf("not implemented: RemoveEarlyAccess - removeEarlyAccess"))
}

// RemoveWorkspaceFeature is the resolver for the removeWorkspaceFeature field.
func (r *mutationResolver) RemoveWorkspaceFeature(ctx context.Context, feature model.FeatureType, workspaceID string) (int, error) {
	panic(fmt.Errorf("not implemented: RemoveWorkspaceFeature - removeWorkspaceFeature"))
}

// ResumeSubscription is the resolver for the resumeSubscription field.
func (r *mutationResolver) ResumeSubscription(ctx context.Context, idempotencyKey string, plan *model.SubscriptionPlan) (*model.UserSubscription, error) {
	panic(fmt.Errorf("not implemented: ResumeSubscription - resumeSubscription"))
}

// Revoke is the resolver for the revoke field.
func (r *mutationResolver) Revoke(ctx context.Context, userID string, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: Revoke - revoke"))
}

// RevokePage is the resolver for the revokePage field.
func (r *mutationResolver) RevokePage(ctx context.Context, pageID string, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokePage - revokePage"))
}

// RevokePublicPage is the resolver for the revokePublicPage field.
func (r *mutationResolver) RevokePublicPage(ctx context.Context, pageID string, workspaceID string) (*model.WorkspacePage, error) {
	panic(fmt.Errorf("not implemented: RevokePublicPage - revokePublicPage"))
}

// SendChangeEmail is the resolver for the sendChangeEmail field.
func (r *mutationResolver) SendChangeEmail(ctx context.Context, callbackURL string, email *string) (bool, error) {
	panic(fmt.Errorf("not implemented: SendChangeEmail - sendChangeEmail"))
}

// SendChangePasswordEmail is the resolver for the sendChangePasswordEmail field.
func (r *mutationResolver) SendChangePasswordEmail(ctx context.Context, callbackURL string, email *string) (bool, error) {
	panic(fmt.Errorf("not implemented: SendChangePasswordEmail - sendChangePasswordEmail"))
}

// SendSetPasswordEmail is the resolver for the sendSetPasswordEmail field.
func (r *mutationResolver) SendSetPasswordEmail(ctx context.Context, callbackURL string, email *string) (bool, error) {
	panic(fmt.Errorf("not implemented: SendSetPasswordEmail - sendSetPasswordEmail"))
}

// SendVerifyChangeEmail is the resolver for the sendVerifyChangeEmail field.
func (r *mutationResolver) SendVerifyChangeEmail(ctx context.Context, callbackURL string, email string, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: SendVerifyChangeEmail - sendVerifyChangeEmail"))
}

// SendVerifyEmail is the resolver for the sendVerifyEmail field.
func (r *mutationResolver) SendVerifyEmail(ctx context.Context, callbackURL string) (bool, error) {
	panic(fmt.Errorf("not implemented: SendVerifyEmail - sendVerifyEmail"))
}

// SetBlob is the resolver for the setBlob field.
func (r *mutationResolver) SetBlob(ctx context.Context, blob graphql.Upload, workspaceID string) (string, error) {
	panic(fmt.Errorf("not implemented: SetBlob - setBlob"))
}

// SetWorkspaceExperimentalFeature is the resolver for the setWorkspaceExperimentalFeature field.
func (r *mutationResolver) SetWorkspaceExperimentalFeature(ctx context.Context, enable bool, feature model.FeatureType, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: SetWorkspaceExperimentalFeature - setWorkspaceExperimentalFeature"))
}

// SharePage is the resolver for the sharePage field.
func (r *mutationResolver) SharePage(ctx context.Context, pageID string, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: SharePage - sharePage"))
}

// UpdateCopilotPrompt is the resolver for the updateCopilotPrompt field.
func (r *mutationResolver) UpdateCopilotPrompt(ctx context.Context, messages []model.CopilotPromptMessageInput, name string) (*model.CopilotPromptType, error) {
	panic(fmt.Errorf("not implemented: UpdateCopilotPrompt - updateCopilotPrompt"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateUserInput) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// UpdateRuntimeConfig is the resolver for the updateRuntimeConfig field.
func (r *mutationResolver) UpdateRuntimeConfig(ctx context.Context, id string, value string) (*model.ServerRuntimeConfigType, error) {
	panic(fmt.Errorf("not implemented: UpdateRuntimeConfig - updateRuntimeConfig"))
}

// UpdateRuntimeConfigs is the resolver for the updateRuntimeConfigs field.
func (r *mutationResolver) UpdateRuntimeConfigs(ctx context.Context, updates string) ([]model.ServerRuntimeConfigType, error) {
	panic(fmt.Errorf("not implemented: UpdateRuntimeConfigs - updateRuntimeConfigs"))
}

// UpdateSubscriptionRecurring is the resolver for the updateSubscriptionRecurring field.
func (r *mutationResolver) UpdateSubscriptionRecurring(ctx context.Context, idempotencyKey string, plan *model.SubscriptionPlan, recurring model.SubscriptionRecurring) (*model.UserSubscription, error) {
	panic(fmt.Errorf("not implemented: UpdateSubscriptionRecurring - updateSubscriptionRecurring"))
}

// UpdateWorkspace is the resolver for the updateWorkspace field.
func (r *mutationResolver) UpdateWorkspace(ctx context.Context, input model.UpdateWorkspaceInput) (*model.WorkspaceType, error) {
	panic(fmt.Errorf("not implemented: UpdateWorkspace - updateWorkspace"))
}

// UploadAvatar is the resolver for the uploadAvatar field.
func (r *mutationResolver) UploadAvatar(ctx context.Context, avatar graphql.Upload) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: UploadAvatar - uploadAvatar"))
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: VerifyEmail - verifyEmail"))
}

// CheckBlobSize is the resolver for the checkBlobSize field.
func (r *queryResolver) CheckBlobSize(ctx context.Context, size string, workspaceID string) (*model.WorkspaceBlobSizes, error) {
	panic(fmt.Errorf("not implemented: CheckBlobSize - checkBlobSize"))
}

// CollectAllBlobSizes is the resolver for the collectAllBlobSizes field.
func (r *queryResolver) CollectAllBlobSizes(ctx context.Context) (*model.WorkspaceBlobSizes, error) {
	panic(fmt.Errorf("not implemented: CollectAllBlobSizes - collectAllBlobSizes"))
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: CurrentUser - currentUser"))
}

// EarlyAccessUsers is the resolver for the earlyAccessUsers field.
func (r *queryResolver) EarlyAccessUsers(ctx context.Context) ([]model.UserType, error) {
	panic(fmt.Errorf("not implemented: EarlyAccessUsers - earlyAccessUsers"))
}

// GetInviteInfo is the resolver for the getInviteInfo field.
func (r *queryResolver) GetInviteInfo(ctx context.Context, inviteID string) (*model.InvitationType, error) {
	panic(fmt.Errorf("not implemented: GetInviteInfo - getInviteInfo"))
}

// IsOwner is the resolver for the isOwner field.
func (r *queryResolver) IsOwner(ctx context.Context, workspaceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: IsOwner - isOwner"))
}

// ListBlobs is the resolver for the listBlobs field.
func (r *queryResolver) ListBlobs(ctx context.Context, workspaceID string) ([]string, error) {
	panic(fmt.Errorf("not implemented: ListBlobs - listBlobs"))
}

// ListCopilotPrompts is the resolver for the listCopilotPrompts field.
func (r *queryResolver) ListCopilotPrompts(ctx context.Context) ([]model.CopilotPromptType, error) {
	panic(fmt.Errorf("not implemented: ListCopilotPrompts - listCopilotPrompts"))
}

// ListWorkspaceFeatures is the resolver for the listWorkspaceFeatures field.
func (r *queryResolver) ListWorkspaceFeatures(ctx context.Context, feature model.FeatureType) ([]model.WorkspaceType, error) {
	panic(fmt.Errorf("not implemented: ListWorkspaceFeatures - listWorkspaceFeatures"))
}

// Prices is the resolver for the prices field.
func (r *queryResolver) Prices(ctx context.Context) ([]model.SubscriptionPrice, error) {
	panic(fmt.Errorf("not implemented: Prices - prices"))
}

// ServerConfig is the resolver for the serverConfig field.
func (r *queryResolver) ServerConfig(ctx context.Context) (*model.ServerConfigType, error) {
	panic(fmt.Errorf("not implemented: ServerConfig - serverConfig"))
}

// ServerRuntimeConfig is the resolver for the serverRuntimeConfig field.
func (r *queryResolver) ServerRuntimeConfig(ctx context.Context) ([]model.ServerRuntimeConfigType, error) {
	panic(fmt.Errorf("not implemented: ServerRuntimeConfig - serverRuntimeConfig"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, email string) (model.UserOrLimitedUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*model.UserType, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter model.ListUserInput) ([]model.UserType, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Workspace is the resolver for the workspace field.
func (r *queryResolver) Workspace(ctx context.Context, id string) (*model.WorkspaceType, error) {
	panic(fmt.Errorf("not implemented: Workspace - workspace"))
}

// Workspaces is the resolver for the workspaces field.
func (r *queryResolver) Workspaces(ctx context.Context) ([]model.WorkspaceType, error) {
	panic(fmt.Errorf("not implemented: Workspaces - workspaces"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
