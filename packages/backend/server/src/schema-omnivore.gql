scalar Date

extend type Query {
  search(
    after: String
    first: Int
    format: String
    includeContent: Boolean
    query: String
  ): SearchResult!

  searchSubscriptions(keyword: String!): [Subscription!]!
}

extend type Mutation {
  subscribe(input: SubscribeInput!): SubscribeResult!
}

type SearchError {
  errorCodes: [SearchErrorCode!]!
}

enum SearchErrorCode {
  QUERY_TOO_LONG
  UNAUTHORIZED
}

type SearchItem {
  aiSummary: String
  annotation: String
  archivedAt: Date
  author: String
  color: String
  content: String
  contentReader: ContentReader!
  readableContent: String!
  createdAt: Date!
  description: String
  directionality: DirectionalityType
  feedContent: String
  folder: String!
  format: String
  id: ID!
  image: String
  isArchived: Boolean!
  labels: [Label!]
  language: String
  links: JSON
  originalArticleUrl: String
  ownedByViewer: Boolean
  pageId: ID
  pageType: PageType!
  previewContentType: String
  publishedAt: Date
  quote: String
  readAt: Date
  readingProgressAnchorIndex: Int!
  readingProgressPercent: Float!
  readingProgressTopPercent: Float
  savedAt: Date!
  score: Float
  seenAt: Date
  shortId: String
  siteIcon: String
  siteName: String
  slug: String!
  subscription: String
  title: String!
  unsubHttpUrl: String
  unsubMailTo: String
  updatedAt: Date
  uploadFileId: ID
  url: String!
  wordsCount: Int
}

type Label {
  color: String!
  createdAt: Date
  description: String
  id: ID!
  internal: Boolean
  name: String!
  position: Int
  source: String
}

type SearchItemEdge {
  cursor: String!
  node: SearchItem!
}

union SearchResult = SearchError | SearchSuccess

type SearchSuccess {
  edges: [SearchItemEdge!]!
  pageInfo: PageInfo!
}

type Page {
  author: String
  createdAt: Date!
  description: String
  hash: String!
  id: ID!
  image: String!
  originalHtml: String!
  originalUrl: String!
  publishedAt: Date
  readableHtml: String!
  title: String!
  type: PageType!
  updatedAt: Date
  url: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  totalCount: Int
}

input PageInfoInput {
  author: String
  canonicalUrl: String
  contentType: String
  description: String
  previewImage: String
  publishedAt: Date
  title: String
}

enum PageType {
  ARTICLE
  BOOK
  FILE
  HIGHLIGHTS
  IMAGE
  PROFILE
  TWEET
  UNKNOWN
  VIDEO
  WEBSITE
}

enum ContentReader {
  EPUB
  PDF
  WEB
}

enum DirectionalityType {
  LTR
  RTL
}

input SubscribeInput {
  autoAddToLibrary: Boolean
  fetchContent: Boolean
  fetchContentType: FetchContentType
  folder: String
  isPrivate: Boolean
  subscriptionType: SubscriptionType
  url: String!
}

enum FetchContentType {
  ALWAYS
  NEVER
  WHEN_EMPTY
}

union SubscribeResult = SubscribeError | SubscribeSuccess

type SubscribeSuccess {
  subscriptions: [Subscription!]!
}

type Subscription {
  autoAddToLibrary: Boolean
  count: Int!
  createdAt: Date!
  description: String
  failedAt: Date
  fetchContent: Boolean!
  fetchContentType: FetchContentType!
  folder: String!
  icon: String
  id: ID!
  isPrivate: Boolean
  lastFetchedAt: Date
  mostRecentItemDate: Date
  name: String!
  newsletterEmail: String
  refreshedAt: Date
  status: SubscriptionStatus!
  type: SubscriptionType!
  unsubscribeHttpUrl: String
  unsubscribeMailTo: String
  updatedAt: Date
  url: String!
}

enum SubscriptionType {
  NEWSLETTER
  RSS
}

type SubscribeError {
  errorCodes: [SubscribeErrorCode!]!
}

enum SubscribeErrorCode {
  ALREADY_SUBSCRIBED
  BAD_REQUEST
  EXCEEDED_MAX_SUBSCRIPTIONS
  NOT_FOUND
  UNAUTHORIZED
}

type SubscriptionError {
  errorCodes: [ErrorCode!]!
}

union SubscriptionResult = SubscriptionError | SubscriptionSuccess

type SubscriptionSuccess {
  subscription: Subscription!
}

enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNAUTHORIZED
}
