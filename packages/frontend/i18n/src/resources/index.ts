// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Run `yarn run download-resources` to regenerate.
// If you need to update the code, please edit `i18n/src/scripts/download.ts` inside your project.
import ca from './ca.json';
import da from './da.json';
import de from './de.json';
import en from './en.json';
import en_Readease from './en-readease.json';
import es from './es.json';
import es_CL from './es-CL.json';
import fr from './fr.json';
import hi from './hi.json';
import ja from './ja.json';
import ko from './ko.json';
import pt_BR from './pt-BR.json';
import ru from './ru.json';
import sv_SE from './sv-SE.json';
import zh_Hans from './zh-Hans.json';
import zh_Hans_Readease from './zh-Hans-readease.json';
import zh_Hant from './zh-Hant.json';

export const LOCALES = [
  {
    id: 1000040010,
    name: 'Korean (South Korea)',
    tag: 'ko',
    originalName: '한국어(대한민국)',
    flagEmoji: '🇰🇷',
    base: false,
    completeRate: 0.77,
    res: replaceAffineWithReadease(ko),
  },
  {
    id: 1000040021,
    name: 'Portuguese (Brazil)',
    tag: 'pt-BR',
    originalName: 'português (Brasil)',
    flagEmoji: '🇧🇷',
    base: false,
    completeRate: 0.336,
    res: replaceAffineWithReadease(pt_BR),
  },
  {
    id: 1000040001,
    name: 'English',
    tag: 'en',
    originalName: 'English',
    flagEmoji: '🇬🇧',
    base: true,
    completeRate: 1,
    res: replaceAffineWithReadease(Object.assign({}, en, en_Readease)),
  },
  {
    id: 1000040003,
    name: 'Traditional Chinese',
    tag: 'zh-Hant',
    originalName: '繁體中文',
    flagEmoji: '🇭🇰',
    base: false,
    completeRate: 0.368,
    res: replaceAffineWithReadease(zh_Hant),
  },
  {
    id: 1000040004,
    name: 'Simplified Chinese',
    tag: 'zh-Hans',
    originalName: '简体中文',
    flagEmoji: '🇨🇳',
    base: false,
    completeRate: 0.99,
    res: replaceAffineWithReadease(
      Object.assign({}, zh_Hans, zh_Hans_Readease)
    ),
  },
  {
    id: 1000040006,
    name: 'French',
    tag: 'fr',
    originalName: 'français',
    flagEmoji: '🇫🇷',
    base: false,
    completeRate: 0.7,
    res: replaceAffineWithReadease(fr),
  },
  {
    id: 1000040008,
    name: 'Spanish',
    tag: 'es',
    originalName: 'español',
    flagEmoji: '🇪🇸',
    base: false,
    completeRate: 0.26,
    res: replaceAffineWithReadease(es),
  },
  {
    id: 1000040009,
    name: 'German',
    tag: 'de',
    originalName: 'Deutsch',
    flagEmoji: '🇩🇪',
    base: false,
    completeRate: 0.299,
    res: replaceAffineWithReadease(de),
  },
  {
    id: 1000040011,
    name: 'Russian',
    tag: 'ru',
    originalName: 'русский',
    flagEmoji: '🇷🇺',
    base: false,
    completeRate: 0.99,
    res: replaceAffineWithReadease(ru),
  },
  {
    id: 1000040014,
    name: 'Japanese',
    tag: 'ja',
    originalName: '日本語',
    flagEmoji: '🇯🇵',
    base: false,
    completeRate: 0.447,
    res: replaceAffineWithReadease(ja),
  },
  {
    id: 1000070001,
    name: 'Catalan',
    tag: 'ca',
    originalName: 'català',
    flagEmoji: '🇦🇩',
    base: false,
    completeRate: 0.068,
    res: replaceAffineWithReadease(ca),
  },
  {
    id: 1000074001,
    name: 'Danish',
    tag: 'da',
    originalName: 'dansk',
    flagEmoji: '🇩🇰',
    base: false,
    completeRate: 0.103,
    res: replaceAffineWithReadease(da),
  },
  {
    id: 1000074003,
    name: 'Spanish (Chile)',
    tag: 'es-CL',
    originalName: 'español (Chile)',
    flagEmoji: '🇨🇱',
    base: false,
    completeRate: 0.028,
    res: replaceAffineWithReadease(es_CL),
  },
  {
    id: 1000074004,
    name: 'Hindi',
    tag: 'hi',
    originalName: 'हिन्दी',
    flagEmoji: '🇮🇳',
    base: false,
    completeRate: 0.017,
    res: replaceAffineWithReadease(hi),
  },
  {
    id: 1000134010,
    name: 'Swedish (Sweden)',
    tag: 'sv-SE',
    originalName: 'svenska (Sverige)',
    flagEmoji: '🇸🇪',
    base: false,
    completeRate: 0.062,
    res: replaceAffineWithReadease(sv_SE),
  },
] as const;

// 定义 JSON 文件中可能出现的数据结构类型
interface JsonObject {
  [key: string]: any;
}

// 替换函数
function replaceAffineWithReadease(obj: JsonObject) {
  for (const key in obj) {
    if (typeof obj[key] === 'object' && obj[key] !== null) {
      // 递归调用替换子对象
      replaceAffineWithReadease(obj[key]);
    } else if (typeof obj[key] === 'string') {
      // 替换字符串中的 "affine" 为 "readease"
      obj[key] = obj[key].replace(/AFFiNE/g, 'Readease');
    }
  }

  return obj;
}
